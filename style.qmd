---
title: "Style"
editor: source
---

## Programming Style

[Google's R Style Guide](https://google.github.io/styleguide/Rguide.html)  
[Tidyverse Style Guide](https://style.tidyverse.org/)  

### Use of `<-` or `=` for assignment in R
[What the documentation says.](https://stat.ethz.ch/R-manual/R-patched/library/base/html/assignOps.html)  

[History](https://www.r-bloggers.com/2018/09/why-do-we-use-arrow-as-an-assignment-operator/). Anyone use the APL language?    
[Discussion](https://blog.revolutionanalytics.com/2008/12/use-equals-or-arrow-for-assignment.html)  
[More Discussion](https://csgillespie.wordpress.com/2010/11/16/assignment-operators-in-r-vs/)  

There are pros and cons to each one. My personal choice is to use `=` because it is easier and it aligns with most other programming languages. Also, in places where it matters which one is used, performing an assignment is considered bad programming practice. 

While assigning a variable inside a function parameter list is considered bad practice, it is sometimes used temporarily while measuring execution time with `system.time()`. If `<-` is used in an expression, adding `system.time()` works as expected.
```{.r}
system.time(x <- my_function())
```
But if using `=` for assignment, we need to add braces, `{` and `}`, or additional parentheses. Otherwise `=` is interpreted to set a value of a function parameter in `system.time()`.
```{.r}
system.time({x = my_function()})
```
Usually, omitting the braces triggers an unknown parameter error, but if the assigned variable is a parameter in `system.time()` it can fail silently!

Either is fine in this class but be aware of the difference and be consistent in using one or the other. This class will not consider programming style in evaluations.
