---
title: "Data"
format: 
  revealjs:
    slide-number: c/t
    width: 1200
    height: 800
    chalkboard: true
    code-link: true
    code-line-numbers: false
editor: source
engine: knitr
---

## File Systems on Delta {.incremental}

- Our project name on Delta is `bckj`.

- Each user has access to three file systems `/u/<username>`, `/projects/bckj/<username>`, and `/scratch/bcjk/<username>`  
- See
[Delta: File Systems](https://docs.ncsa.illinois.edu/systems/delta/en/latest/user_guide/architecture.html?highlight=file%20systems#file-systems), and  
[Delta: Data Management](https://docs.ncsa.illinois.edu/systems/delta/en/latest/user_guide/data_mgmt.html) for more details.

- None of the Delta file systems are backed up - another good reason to work via GitHub.

## Permissions on the directories

(`gostrouc` user view):

```{bash}
#| eval: false
#| echo: true
ls -ld $HOME
```

::: {.cell-output-stdout}
```
drwxrwx---+ 9 root root 4096 Mar 29 16:14 /u/gostrouc/
```
:::

```{bash}
#| eval: false
#| echo: true
ls -ld /projects/bckj
```

::: {.cell-output-stdout}
```
drwxrws---+ 26 root delta_bckj 12288 Mar 26 04:55 /projects/bckj/
```
:::

```{bash}
#| eval: false
#| echo: true
ls -ld /scratch/bckj
```

::: {.cell-output-stdout}
```
drwxrws---+ 26 root delta_bckj 8192 Mar 26 04:55 /scratch/bckj/
```
:::
<br>
`d|uuu|ggg|ooo` $\quad$  
dir|user|group|others  

Exec permissions (from `man` page):    
- x   The execute/search bits  
- s   The set-user-ID-on-execution and set-group-ID-on-execution bits  

## `/projects/bcjk`

```{bash}
#| eval: false
#| echo: true
ls -l /projects/bckj
```

::: {.cell-output-stdout}
```
total 96
drwxrws---+ 2 aholme27         delta_bckj 4096 Mar 19 14:55 aholme27/
drwxrws---+ 2 asajjad          delta_bckj 4096 Mar 21 11:55 asajjad/
drwxrws---+ 2 ballred          delta_bckj 4096 Mar 21 10:55 ballred/
drwxrws---+ 2 briddle          delta_bckj 4096 Mar 26 03:55 briddle/
drwxrws---+ 2 carolinetabeling delta_bckj 4096 Mar 21 10:56 carolinetabeling/
drwxrws---+ 2 cdeaton3         delta_bckj 4096 Mar 21 10:55 cdeaton3/
drwxrws---+ 2 cking134         delta_bckj 4096 Mar 19 14:55 cking134/
drwxrws---+ 2 gostrouc         delta_bckj 4096 Feb  3 03:55 gostrouc/
drwxrws---+ 2 hjohns61         delta_bckj 4096 Mar 25 16:55 hjohns61/
drwxrws---+ 2 ianleonard       delta_bckj 4096 Mar 21 10:56 ianleonard/
drwxrws---+ 2 jcamilleri       delta_bckj 4096 Mar 21 10:56 jcamilleri/
drwxrws---+ 2 jgary4           delta_bckj 4096 Mar 21 10:56 jgary4/
drwxrws---+ 2 jmillic4         delta_bckj 4096 Mar 19 14:55 jmillic4/
drwxrws---+ 2 jpeta            delta_bckj 4096 Mar 21 10:55 jpeta/
drwxrws---+ 2 kpatel8          delta_bckj 4096 Mar 21 12:55 kpatel8/
drwxrws---+ 2 lhu7             delta_bckj 4096 Mar 21 10:55 lhu7/
drwxrws---+ 2 lmcpherr         delta_bckj 4096 Mar 21 10:56 lmcpherr/
drwxrws---+ 2 lschwar4         delta_bckj 4096 Mar 19 14:55 lschwar4/
drwxrws---+ 2 mrobiso4         delta_bckj 4096 Mar 26 04:55 mrobiso4/
drwxrws---+ 2 sp28             delta_bckj 4096 Mar 26 03:55 sp28/
drwxrws---+ 2 sthompson2       delta_bckj 4096 Mar 26 04:55 sthompson2/
drwxrws---+ 2 tdykes2          delta_bckj 4096 Mar 21 10:55 tdykes2/
drwxrws---+ 2 wjeter           delta_bckj 4096 Mar 21 10:56 wjeter/
drwxrws---+ 2 ychang27         delta_bckj 4096 Mar 19 14:55 ychang27/
```
:::

## `/scratch/bcjk`

```{bash}
#| eval: false
#| echo: true
ls -l /scratch/bckj
```

::: {.cell-output-stdout}
```
total 96
drwxrws---+ 2 aholme27         delta_bckj 4096 Mar 19 14:55 aholme27/
drwxrws---+ 2 asajjad          delta_bckj 4096 Mar 21 11:55 asajjad/
drwxrws---+ 2 ballred          delta_bckj 4096 Mar 21 10:55 ballred/
drwxrws---+ 2 briddle          delta_bckj 4096 Mar 26 03:55 briddle/
drwxrws---+ 2 carolinetabeling delta_bckj 4096 Mar 21 10:56 carolinetabeling/
drwxrws---+ 2 cdeaton3         delta_bckj 4096 Mar 21 10:55 cdeaton3/
drwxrws---+ 2 cking134         delta_bckj 4096 Mar 19 14:55 cking134/
drwxrws---+ 2 gostrouc         delta_bckj 4096 Feb  3 03:55 gostrouc/
drwxrws---+ 2 hjohns61         delta_bckj 4096 Mar 25 16:55 hjohns61/
drwxrws---+ 2 ianleonard       delta_bckj 4096 Mar 21 10:56 ianleonard/
drwxrws---+ 2 jcamilleri       delta_bckj 4096 Mar 21 10:56 jcamilleri/
drwxrws---+ 2 jgary4           delta_bckj 4096 Mar 21 10:56 jgary4/
drwxrws---+ 2 jmillic4         delta_bckj 4096 Mar 19 14:55 jmillic4/
drwxrws---+ 2 jpeta            delta_bckj 4096 Mar 21 10:55 jpeta/
drwxrws---+ 2 kpatel8          delta_bckj 4096 Mar 21 12:55 kpatel8/
drwxrws---+ 2 lhu7             delta_bckj 4096 Mar 21 10:55 lhu7/
drwxrws---+ 2 lmcpherr         delta_bckj 4096 Mar 21 10:56 lmcpherr/
drwxrws---+ 2 lschwar4         delta_bckj 4096 Mar 19 14:55 lschwar4/
drwxrws---+ 2 mrobiso4         delta_bckj 4096 Mar 26 04:55 mrobiso4/
drwxrws---+ 2 sp28             delta_bckj 4096 Mar 26 03:55 sp28/
drwxrws---+ 2 sthompson2       delta_bckj 4096 Mar 26 04:55 sthompson2/
drwxrws---+ 2 tdykes2          delta_bckj 4096 Mar 21 10:55 tdykes2/
drwxrws---+ 2 wjeter           delta_bckj 4096 Mar 21 10:56 wjeter/
drwxrws---+ 2 ychang27         delta_bckj 4096 Mar 19 14:55 ychang27/
```
:::

## Using the File Systems {.smaller}

- Code is typically maintained in `/u/<username>`
- Project data is usually kept in `/projects/bckj/` subdirectories  
  - This is also a place for project team accessible code
- Runtime temporary data can be written to `/scratch/bckj/`  

::: {.cell-output-stdout}
```
[gostrouc@dt-login04 data]$ ls -ld /projects/bckj/Team*
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  8 09:32 /projects/bckj/Team1/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  8 09:32 /projects/bckj/Team2/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  8 09:32 /projects/bckj/Team3/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  8 09:32 /projects/bckj/Team4/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  8 09:32 /projects/bckj/Team5/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  8 09:32 /projects/bckj/Team6/
```
:::

## Bringing Output Back to Laptop {.smaller}

NCSA [recommendations](https://docs.ncsa.illinois.edu/systems/icc/en/latest/user_guide/storage_data.html#cli-transfer-method-scp)   

- Windows users: [WinSCP](https://winscp.net/eng/download.php) or [Cuberduck](https://cyberduck.io/download/)
- Mac users: in laptop Terminal
  - `scp <user>@login.delta.ncsa.illinois.edu:<file-path> <dest-path>`  
  - `<file-path>` is relative to home directory on Delta or an absolute path (starts with `/`) on Delta  
  - `<dest-path>` is on your laptop   

## Reading Data Overview
 
- Text files (.csv, .tsv, .txt, ... ): variable length records  
```{.r}
data.table::fread()  # fastest reader
```

```{.r}
readr::read_delim()  # fast reader    
```

- Binary file formats faster for large data (& smaller): fixed length records  
```{.r}
arrow::read_parquet()  # chunked column-oriented format (.parquet extension)
```

  - [Arrow for R Cheatsheet](https://github.com/apache/arrow/blob/main/r/cheatsheet/arrow-cheatsheet.pdf)  
      
```{.r}
rhdf5::h5read()  # hierarchical array-oriented format (.h5 extension)
```

   -  [`rhdf5` Practical Tips](https://bioconductor.org/packages/devel/bioc/vignettes/rhdf5/inst/doc/practical_tips.html) on Bioconductor   

- Other formats (.xlsx, etc. )  

## Downloading Data Overview

**Unix:** `wget`, `curl`, `scp`

**R:** `utils::download.file()`
  
## New York TLC Trip Record Data

- [TLC: Taxi and Limousine Commission](https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page)  
- Includes: pick-up and drop-off dates/times, pick-up and drop-off locations, trip distances, itemized fares, rate types, payment types, and driver-reported passenger counts

- [Data overview](https://tlcpolicy.maps.arcgis.com/apps/instant/portfolio/index.html?appid=be00fce0963540628e37fd7c75a6d386)  

- [Yellow Taxi Trip Data Dictionary](https://www.nyc.gov/assets/tlc/downloads/pdf/data_dictionary_trip_records_yellow.pdf)

- [Green Taxi Trips Data Dictionary](https://www.nyc.gov/assets/tlc/downloads/pdf/data_dictionary_trip_records_green.pdf)  

- [FHV Trips Data Dictionary](https://www.nyc.gov/assets/tlc/downloads/pdf/data_dictionary_trip_records_fhv.pdf)  

- [High Volume FHV Trips Data Dictionary](https://www.nyc.gov/assets/tlc/downloads/pdf/data_dictionary_trip_records_hvfhs.pdf)  

## Yellow Taxi Trip Data 

Yellow taxi trip data is downloaded on Delta in `parquet` format with an `arrow`-friendly directory structure.

::: {.cell-output-stdout}
```
[gostrouc@dt-login03 ~]$ cd /projects/bckj/TLC_yellow
[gostrouc@dt-login03 TLC_yellow]$ ls -l
total 60
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:06 'year=2009'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:07 'year=2010'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:08 'year=2011'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:09 'year=2012'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:09 'year=2013'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:09 'year=2014'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:09 'year=2015'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:10 'year=2016'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:10 'year=2017'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:10 'year=2018'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:10 'year=2019'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:10 'year=2020'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:10 'year=2021'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 21:10 'year=2022'/
drwxrws---+ 14 gostrouc delta_bckj 4096 Apr  7 22:43 'year=2023'/
```
:::

## Yellow Taxi Trip Data `/projects/bckj/TLC_yellow`

::: {.cell-output-stdout}
```
[gostrouc@dt-login03 TLC_yellow]$ du -hs ./*
5.4G	./year=2009
5.3G	./year=2010
2.1G	./year=2011
2.1G	./year=2012
2.0G	./year=2013
2.1G	./year=2014
1.9G	./year=2015
1.8G	./year=2016
1.5G	./year=2017
1.4G	./year=2018
1.2G	./year=2019
358M	./year=2020
458M	./year=2021
587M	./year=2022
[gostrouc@dt-login03 TLC_yellow]$ du -hs .
29G	.
```
:::

## Yellow Taxi Trip Data `2009`

::: {.cell-output-stdout}
```
[gostrouc@dt-login03 TLC_yellow]$ ls -l 'year=2009'
total 48
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:05 'month=1'/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:06 'month=10'/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:06 'month=11'/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:06 'month=12'/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:05 'month=2'/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:05 'month=3'/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:05 'month=4'/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:05 'month=5'/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:05 'month=6'/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:06 'month=7'/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:06 'month=8'/
drwxrws---+ 2 gostrouc delta_bckj 4096 Apr  7 21:06 'month=9'/
```
:::

## Yellow Taxi Trip Data `2009-01`

::: {.cell-output-stdout}
```
[gostrouc@dt-login03 TLC_yellow]$ ls -l 'year=2009/month=1'
total 458756
-rw-rw----+ 1 gostrouc delta_bckj 469759995 Apr  7 21:05 yellow_tripdata_2009-01.parquet
[gostrouc@dt-login03 TLC_yellow]$ ls -l 'year=2009/month=2'
total 433048
-rw-rw----+ 1 gostrouc delta_bckj 443434087 Apr  7 21:05 yellow_tripdata_2009-02.parquet
[gostrouc@dt-login03 TLC_yellow]$ ls -l 'year=2009/month=3'
total 471288
-rw-rw----+ 1 gostrouc delta_bckj 482592227 Apr  7 21:05 yellow_tripdata_2009-03.parquet
[gostrouc@dt-login03 TLC_yellow]$ ls -lh 'year=2009/month=11'
total 457M
-rw-rw----+ 1 gostrouc delta_bckj 457M Apr  7 21:06 yellow_tripdata_2009-11.parquet
[gostrouc@dt-login03 TLC_yellow]$ ls -lh 'year=2009/month=12'
total 466M
-rw-rw----+ 1 gostrouc delta_bckj 465M Apr  7 21:06 yellow_tripdata_2009-12.parquet
```
:::

## `curl` Yellow Taxi Trip Data 

```{r}
#| eval: false
#| echo: true

#' tlc_get_ym: Gets one month of TLC yellow taxi data and writes it in Hive
#' style directory names, such as `dest/year=2015/month=8/file_name.parquet`.
#' 
#' @param ymd
#' A **lubridate** "YYYY-MM-01" giving the year and month to be retrieved.
#' @param name
#' Character file name base (such as 'yellow_tripdata') from the TLC 
#' repository documentation.
#' @param dest
#' Character destination directory path.
#' @param url
#' Character URL of data source location.
#' 
#' @details
#' Uses `method = curl` to get one month of TLC yellow taxi data into the
#' `dest` directory. Since `download.file()` engages `curl`
#' with a `system()` call, generating these calls to `tlcYM_get()` can be 
#' completely parallel and the data never touches R. 
#' 
#' @returns 
#' Invisibly, returns the character URL/file combination used in data retrieval.
#' 
tlc_get_ym = function(ymd, name = "yellow_tripdata", 
                     dest = "/projects/bckj/TLC_yellow",
                     url = "https://d37ci6vzurychx.cloudfront.net/trip-data") {
  yr = lubridate::year(ymd)
  month = lubridate::month(ymd)

  ## Construct source url/file
  file_name = paste0(name, "_", yr, '-', sprintf('%02d', month), '.parquet')
  file_url = paste0(url, '/', file_name)
  
  ## Construct destination directory
  dest_dir = paste0(dest, "/year=", yr)
  if(!dir.exists(dest_dir)) dir.create(dest_dir)
  dest_dir = paste0(dest_dir, "/month=", month)
  if(!dir.exists(dest_dir)) dir.create(dest_dir)
  
  download.file(file_url, paste0(dest_dir, "/", file_name), method = "curl",
                quiet = TRUE)
  invisible(file_url)
}

#' tlc_get_range: A wrapper for `tlc_get_ym()` to get a range of months and do
#' it in parallel.
#' 
#' @param first
#' Character "YYYY-MM" first month. Uses `lubridate::ym()` to read
#' @param last
#' Character "YYYY-MM" last month
#' @param cores
#' Integer number of cores to use for running `curl` instances in parallel
#' 
#' @details
#' Since the function does a system call to `curl`, its time does not include
#' the core time used by `curl` and includes only the R function time. But
#' the *real* or *elapsed* time is correct.
#' 
#' @returns
#' Invisibly returns the full vector of months retrieved
#' 
tlc_get_range = function(first, last, cores = 1) {
  ## construct vector of yr-month-day requests
  dates = seq(lubridate::ym(first), lubridate::ym(last), "months")
  parallel::mclapply(dates, tlc_get_ym, mc.cores = cores)
  invisible(dates)
}

# tlc_get_range("2021-01", "2022-12", cores = 1)

```

## Compare `csv` to `parquet` reads in R {.smaller}

**arrow** (parquet 0.423GB, csv 1.7GB)  

::: {.cell-output-stdout}
```
> system.time({tlc2009.02arr = arrow::read_parquet("/projects/bckj/TLC_yellow/year=2009/month=2/yellow_tripdata_2009-02.parquet")})
   user  system elapsed 
  3.363   1.981  12.236 
> system.time({tlc2009.02arrcsv = arrow::read_csv_arrow("/projects/bckj/TLC_yellow_csv/year=2009/month=2/part-0.csv")})
   user  system elapsed 
 20.513  32.494  33.163 
```
:::

**readr** (csv 1.7GB)

::: {.cell-output-stdout}
```
> system.time({tlc2009.02csv = readr::read_csv("/projects/bckj/TLC_yellow_csv/year=2009/month=2/part-0.csv")})
Rows: 14092413 Columns: 18                                                                                         
── Column specification ──────────────────────────────────────────────────────────────────────────────────────────────
Delimiter: ","
chr   (2): vendor_name, Payment_Type
dbl  (11): Passenger_Count, Trip_Distance, Start_Lon, Start_Lat, End_Lon, En...
lgl   (3): Rate_Code, store_and_forward, mta_tax
dttm  (2): Trip_Pickup_DateTime, Trip_Dropoff_DateTime

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
   user  system elapsed 
 56.194  24.529  51.976 
```
:::

**data.table** (csv 1.7GB)  

::: {.cell-output-stdout}
```
> system.time({tlc2009.02dtcsv = data.table::fread("/projects/bckj/TLC_yellow_csv/year=2009/month=2/part-0.csv")})
|--------------------------------------------------|
|==================================================|
   user  system elapsed 
 29.299  28.551  25.260 
```
:::

## Convert your `csv` data to `parquet`

```{r}
#| eval: false
#| echo: true
library(arrow)
library(dplyr)

tlc = open_csv_dataset("/projects/bckj/TLC_yellow_csv/year=2009")

write_parquet(tlc, sink = "/scratch/bckj/TLCtest")
```
<br>

Should work but currently fails on TLC_yellow_csv. Possibly due to second/partial conversion parquet to csv to part-parquet? 

Consequently, this becomes an optional portion of Assignment 4.

## Memory Use by R {.smaller}

**memuse** package   

- `memuse::mu()`: memory used by an object   
   - Adding option `prefix = "SI"` uses SI units (`1e3` multiples, not `2^10` multiples)
- `memuse::Sys.procmem()`: memory of the current R process  
- `memuse::Sys.meminfo()`: total available memory, and free memory

**pryr** package  

- `pryr::object_size()`: memory used by an object   
- `pryr::mem_used()`: memory of the current R process 

The two packages can disagree with each other and with Unix. Try  
- `system2("ps", paste("-o drs,rss -p", Sys.getpid()))`

::: aside
**pryr:** "The details of R’s memory management are not documented in a single place. Most of the information in this chapter was gleaned from a close reading of the documentation (particularly ?Memory and ?gc), the memory profiling section of R-exts, and the SEXPs section of R-ints. The rest I figured out by reading the C source code, performing small experiments, and asking questions on R-devel. Any mistakes are entirely mine." Hadley Wickham, [Advanced R](http://adv-r.had.co.nz/memory.html)   (Same comment could be made by the **memuse** package author, but I find it agrees with Unix more often)
:::

## A Note about Words

"**batch processing**"  
- HPC: running scripts non-interactively (whole) 
- **arrow** package: reading data in chunks (by batches, not whole)  
<br>

"**fork**"  
- HPC: Unix fork parallel process spawning  
- GitHub: Creating a repository fork ( making a copy for concurrent development)   

## Reading Data {.smaller}

See examples in `BZAN_583_code/data`

- `exploreTLC.R` and `exploreTLC.sh`
- `fread_exploreTLC.R` and `fread_exploreTLC.sh`
- `MPIexploreTLC.R` and `MPIexploreTLC.sh` (incomplete)

## `exploreTLC.R`: 2 months

::: {.cell-output-stdout}

```
[gostrouc@dt-login03 data]$ cat utk.o
/u/gostrouc/BZAN_583_code/data
loaded R
Size:  146.953 MiB 
Peak:  146.953 MiB 
Totalram:  251.600 GiB 
Freeram:   229.427 GiB 
58.7 MB
  DRS   RSS
765391 150796
[1] "opening dataset"
FileSystemDataset with 12 Parquet files
vendor_name: string
Trip_Pickup_DateTime: string
Trip_Dropoff_DateTime: string
Passenger_Count: int64
Trip_Distance: double
Start_Lon: double
Start_Lat: double
Rate_Code: double
store_and_forward: double
End_Lon: double
End_Lat: double
Payment_Type: string
Fare_Amt: double
surcharge: double
mta_tax: double
Tip_Amt: double
Tolls_Amt: double
Total_Amt: double
month: int32

See $metadata for additional Schema metadata
[1] "into lapply"
   user  system elapsed 
 59.396   2.090  54.976 
[1] 10.35707
[1] "into mclapply"
   user  system elapsed 
 65.569   8.483  50.902 
[1] 10.35707
4.336 GiB
Size:  4.524 GiB 
Peak:  9.906 GiB 
4.67 GB
[1] 27472535       19
```

:::

## `exploreTLC.R`: 4 months  

:::{.cell-output-stdout}

```
[gostrouc@dt-login03 data]$ cat utk.o
/u/gostrouc/BZAN_583_code/data
loaded R
Size:  146.883 MiB 
Peak:  146.883 MiB 
Totalram:  251.600 GiB 
Freeram:   229.428 GiB 
58.7 MB
  DRS   RSS
765395 150660
[1] "opening dataset"
FileSystemDataset with 12 Parquet files
vendor_name: string
Trip_Pickup_DateTime: string
Trip_Dropoff_DateTime: string
Passenger_Count: int64
Trip_Distance: double
Start_Lon: double
Start_Lat: double
Rate_Code: double
store_and_forward: double
End_Lon: double
End_Lat: double
Payment_Type: string
Fare_Amt: double
surcharge: double
mta_tax: double
Tip_Amt: double
Tolls_Amt: double
Total_Amt: double
month: int32

See $metadata for additional Schema metadata
[1] "into lapply"
   user  system elapsed 
127.074   5.567 121.475 
[1] 10.54913
[1] "into mclapply"
   user  system elapsed 
135.182  29.250 117.389 
[1] 10.54913
8.862 GiB
Size:   9.553 GiB 
Peak:  22.300 GiB 
9.46 GB
[1] 56154689       19
```
:::

## `fread_exploreTLC.R`: 2 months

::: {.cell-output-stdout}

```
[gostrouc@dt-login03 data]$ cat utk.o
/u/gostrouc/BZAN_583_code/data
loaded R
Size:  65.391 MiB 
Peak:  65.391 MiB 
Totalram:  251.600 GiB 
Freeram:   229.182 GiB 
37.3 MB
  DRS   RSS
540259 82336
[1] "opening dataset"
[1] "into lapply"
   user  system elapsed 
 37.783   6.971 515.404 
[1] 10.35707
[1] "into mclapply"
   user  system elapsed 
 24.401   6.467  18.516 
[1] 10.35707
3.275 GiB
Size:  3.357 GiB 
Peak:  7.337 GiB 
3.56 GB
[1] 27472535       18
```
:::


## `fread_exploreTLC.R`: 4 months

::: {.cell-output-stdout}
```
[gostrouc@dt-login03 data]$ cat utk.o
/u/gostrouc/BZAN_583_code/data
loaded R
Size:  65.430 MiB 
Peak:  65.430 MiB 
Totalram:  251.600 GiB 
Freeram:   229.418 GiB 
37.3 MB
  DRS   RSS
540263 82364
[1] "opening dataset"
[1] "into mclapply"
   user  system elapsed 
 69.074  16.826 216.538 
[1] 10.54913
6.694 GiB
Size:   6.774 GiB 
Peak:  14.178 GiB 
7.23 GB
[1] 56154689       18
[gostrouc@dt-login03 data]$ 
```
:::

## Issues with Slow Data Reads on Delta

- Compute nodes are shared if not all cores requested  
  - Can compete for I/O channels with other jobs  
  - Tends to be much less busy in AM  

- Lustre file system optimized for large binary reads
  - That's `/projects` and `/scratch` file systems
  - Data sets with many files can have issues  

