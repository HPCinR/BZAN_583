---
title: "Workflow for Remote Computing with R"
format: 
  revealjs:
    chalkboard: true
editor: source
---

## Workflow for Remote Computing in R  

![](/pics/01-intro/Workflow.png)

## Workflow for Remote Computing in R {background-image="/pics/01-intro//Workflow.png" background-size="300px" background-position="bottom right" .smaller}

#### Laptop RStudio

-   Familiar custom editing environment (Windows, Mac, Unix)
-   Interactive Syntax checking

#### git, GitHub (or GitLab and Bitbucket)

-   Portability to remote computing
-   Version control
-   Collaboration

#### Cluster unix

-   Same environment for all
-   Batch job submission

::: notes
-   Portability - in your basement or on another continent
-   RStudio installs difficult - legacy OS on HPC
-   Bandwidth
:::

## Cooperating R Sessions on a Modern Cluster {background-image="/pics/01-intro/BatchRonClusterLaptop.jpg" background-size="1100px" background-position="bottom right"}

8 Nodes (124 + 4 cores each)\
- 32 R sessions\
- each using 31 cores\
- 992 cores total\

::: notes

-   Laptop - login node - resource script\

-   BIG data on parallel file system - not on laptop!\

-   Can monitor a longer run with logins to compute nodes\

-   Batch
:::

## Software Needed on Laptop {background-image="/pics/01-intro//Workflow.png" background-size="300px" background-position="bottom right"}

-   Mac
    -   R, RStudio

    -   terminal, git (in Xcode)
-   Windows
    -   R, RStudio

    -   putty

    -   git

    -   WinSCP

## Software on Cluster {background-image="/pics/01-intro//Workflow.png" background-size="300px" background-position="top right" .smaller}

-   FlexiBLAS, OpenBLAS
-   OpenMPI
-   Arrow or HDF5 (for parallel I/O)
-   R (\>= 4.0)

### Above managed by center, below by you

-   And various packages, including `pbdMPI`

#### R vs conda-R Deployment:

-   Different package management philosophy
-   Can create conflicts if mixing, a layer of complexity

::: notes
-   Solves some dependency issues but creates others
:::

## GitHub + git (laptop to cluster)

::: {layout="[1,3,1]"}
![](/pics/01-intro/WorkflowGit.jpg)

![](/pics/01-intro/Git_operations.svg) [<small>By Daniel Kinzler - Own work, CC BY 3.0</small>](https://commons.wikimedia.org/w/index.php?curid=25223536)

![](/pics/01-intro/WorkflowCluster.jpg){fig-align="top"}
$$\qquad$$
![](/pics/01-intro/WorkflowLaptop.jpg){fig-align="bottom"}
:::

::: notes
* RStudio demo and checkbox `add`
* names for head, remote, 
:::

## Making **git** easy {background-image="/pics/01-intro/WorkflowPushPull.jpg" background-size="300px" background-position="top right" .smaller}

-   Private and Public key pairs for Client and Server

    -   Git repository (GitHub, GitLab) is the **server**
    -   Your laptop and remote cluster are **clients**

-   Each **client** has own *key-pair*

    -   *Private key* stays on the **client**
    -   *Public key* is copied to the **server**

-   Works like a single-use password generator and authentication

    -   Client contacts server, server responds with a random string encrypted by client's public key
    -   Client decrypts with own private key and sends to server
    -   Server verifies agreement and opens secure connection

## Clusters are Linux systems {background-image="/pics/01-intro//WorkflowCluster.jpg" background-size="300px" background-position="top right" .smaller}

-   Linux is one of many descendants of original Unix. MacOS is another.

    -   Everything in Linux is a file (some are directory files)
    -   Linux files are organized as a tree
    -   Every file has permissions: d r w x | r w x | r w x
        -  delete, read, write, execute
        -  owner, group, all
    -   Every file has *owner*, *group*, and a few other attributes
    -   Available commands are executable files in your PATH directories

::: notes
*Unix* (Bell Labs) was a play on an earlier *Multics* operating system (designed at MIT)
:::

## Linux Commands {.smaller background-image="/pics/01-intro//WorkflowCluster.jpg" background-size="300px" background-position="top right"}

In a terminal, you talk to a *shell* program (*bash* is most common)

-   Commands (executable files) can have *options* and *arguments*

*Standard input* and *standard output* of a command is the terminal but can be redirected

-   **\<**, **\<\<**, **\>**, **\>\>** redirect standard input and output
-   *command1* **\|** *command2* pipes standard output1 to standard input2

Commands are files in directories listed in your PATH variable (try "echo \$PATH")

-   \$ means substitute variable value
-   *export* lists (or sets) variables and their values

There are many resources on the web to learn Linux basics

## Job Submission on Cluster {.smaller background-image="/pics/01-intro//WorkflowCluster.jpg" background-size="300px" background-position="top right"}

-   Command line submission
-   Shell script submission (preferred)

### SLURM

<mark>sbatch *your-shell-script.sh* </mark>

<mark>squeue -u *uid*</mark>

<mark>scancel *jobnumber*</mark>

### Software Modules

set software environment (PATH)

<mark>*module list*</mark> - list what is loaded\
<mark>*module avail*</mark> - list what is available\
<mark>*module load r*</mark>

